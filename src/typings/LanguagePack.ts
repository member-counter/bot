interface LanguagePack extends RootObject {}
export default LanguagePack;

// This file has been autogenerated with json-to-js (https://www.npmjs.com/package/json-to-ts)
// If you ever modify src/lang/en_US.json, please, select the whole file and convert it with the tool mentioned above (there is a vscode extension)
// Remove all the content below this line and paste the new output generated by json-to-ts

interface RootObject {
	langCode: string;
	langName: string;
	commands: Commands;
	functions: Functions;
	common: Common;
}

interface Common {
	error: string;
	errorDb: string;
	errorDiscordAPI: string;
	errorUnknown: string;
	errorNoAdmin: string;
	noTopicCounterEnabled: string;
}

interface Functions {
	commandHandler: CommandHandler;
	getCounts: GetCounts;
	paginator: Paginator;
}

interface Paginator {
	pageCounter: string;
	jumpPrompt: string;
	errorPageLengthExceeded: string;
	errorNegativeInput: string;
}

interface GetCounts {
	onlyPremium: string;
	unknownCounter: string;
	disabled: string;
	noBanPerms: string;
	invalidChannelLength: string;
	notAvailable: string;
}

interface CommandHandler {
	noDm: string;
}

interface Commands {
	help: Help;
	guide: Guide;
	lockChannel: LockChannel;
	editChannel: EditChannel;
	setDigit: SetDigit;
	shortNumber: ShortNumber;
	locale: Locale;
	prefix: Prefix;
	role: Role;
	seeSettings: SeeSettings;
	resetSettings: ResetSettings;
	update: Update;
	upgradeServer: UpgradeServer;
	info: Info;
	lang: Lang;
	donate: Donate;
	profile: Profile;
	counts: Counts;
	preview: Preview;
	setup: Setup;
	base64: Base64;
}

interface Base64 {
	helpDescription: string;
	invalidAction: string;
}

interface Setup {
	helpDescription: string;
	status: Status;
	errorInvalidUsage: string;
	counterTemplates: CounterTemplates;
}

interface CounterTemplates {
	default: Default;
	twitch: Default;
	youtube: Default;
}

interface Default {
	categoryName: string;
	counters: Counter2[];
}

interface Counter2 {
	name: string;
	template: string;
	statusCreating: string;
	statusCreated: string;
}

interface Status {
	creatingCounts: string;
	createdCounts: string;
	creatingCategory: string;
	createdCategory: string;
}

interface Preview {
	helpDescription: string;
	helpImage: string;
	channelName: string;
	channelTopic: string;
}

interface Counts {
	helpDescription: string;
	members: string;
	onlineMembers: string;
	offlineMembers: string;
	bots: string;
	connectedUsers: string;
	channels: string;
	roles: string;
}

interface Profile {
	helpDescription: string;
	badges: string;
	serverUpgradesAvailable: string;
	removeDataConfirmation: string;
	removeDataSuccess: string;
}

interface Donate {
	helpDescription: string;
	embedReply: EmbedReply3;
	misc: Misc2;
	errorExchangeFetch: string;
}

interface Misc2 {
	emptyNote: string;
}

interface EmbedReply3 {
	title: string;
	fields: any[];
}

interface Lang {
	helpDescription: string;
	success: string;
	errorNotFound: string;
}

interface Info {
	helpDescription: string;
	embedReply: EmbedReply2;
}

interface EmbedReply2 {
	description: string;
}

interface UpgradeServer {
	helpDescription: string;
	success: string;
	errorCannotUpgrade: string;
	noServerUpgradesAvailable: string;
}

interface Update {
	helpDescription: string;
	inProgress: string;
	success: string;
	wait: string;
}

interface ResetSettings {
	helpDescription: string;
	done: string;
}

interface SeeSettings {
	helpDescription: string;
	settingsMessage: SettingsMessage;
}

interface SettingsMessage {
	headerText: string;
	prefixText: string;
	langText: string;
	localeText: string;
	shortNumberText: string;
	premiumText: string;
	premiumNoTierText: string;
	premiumConfirmedText: string;
	allowedRolesText: string;
	countersText: string;
	customNumbersText: string;
	warningNoPermsText: string;
	guildLogsText: string;
}

interface Role {
	helpDescription: string;
	rolesUpdated: string;
	errorNoRolesToUpdate: string;
	invalidParams: string;
}

interface Prefix {
	helpDescription: string;
	success: string;
	noPrefixProvided: string;
}

interface Locale {
	helpDescription: string;
	helpImage: string;
}

interface ShortNumber {
	helpDescription: string;
	helpImage: string;
	errorInvalidAction: string;
	success: string;
}

interface SetDigit {
	helpDescription: string;
	success: string;
	resetSuccess: string;
	errorMissingParams: string;
}

interface EditChannel {
	helpDescription: string;
	success: string;
	errorNotFound: string;
	errorNoContent: string;
}

interface LockChannel {
	helpDescription: string;
	success: string;
	errorInvalidChannel: string;
	errorNoPerms: string;
	errorNotFound: string;
}

interface Guide {
	helpDescription: string;
	pagesText: string;
	explanation: string;
	countersHeader: string;
	counters: Counter[];
}

interface Counter {
	key: string;
	name: string;
	description: string;
}

interface Help {
	helpDescription: string;
	embedReply: EmbedReply;
	misc: Misc;
}

interface Misc {
	command: string;
	errorCommandNotFound: string;
}

interface EmbedReply {
	title: string;
	description: string;
	fields: Field[];
}

interface Field {
	name: string;
	value: string;
	inline: boolean;
}
